//带log的版本
pragma circom 2.2.2;

// S-box Template: x^d (here d=5)
// Must be a template to declare signals and apply constraints
template SBox() {
    signal input x;
    signal output out;

    // Intermediate signals for decomposition
    signal x_sq;   // x^2
    signal x_cub;  // x^3
    signal x_quad; // x^4

    // Quadratic constraints
    x_sq <== x * x;         // x^2
    x_cub <== x_sq * x;     // x^3
    x_quad <== x_cub * x;   // x^4
    out <== x_quad * x;     // x^5
}



// 实现 Poseidon2 的单轮逻辑

template Poseidon2Round(roundType, roundIdx, t_state_width, total_rounds) {
    signal input in_state[t_state_width];
    signal output out_state[t_state_width];
    log("---------------------------------------");
    log("Circom Round: ", roundIdx);
    // Hardcode t_width = 3 for array dimensions here
    var MDS[3][3]; // <--- HARDCODED VALUE (for t=3)
    MDS[0][0] = 2; MDS[0][1] = 1; MDS[0][2] = 1;
    MDS[1][0] = 1; MDS[1][1] = 2; MDS[1][2] = 1;
    MDS[2][0] = 1; MDS[2][1] = 1; MDS[2][2] = 2;

    for (var i = 0; i < t_state_width; i++) {
        log("  In State[", i, "]: ", in_state[i]);
    }
    log("  Round Type: ", roundType); 


    // Hardcode total_rounds = 64 and t_width = 3 for array dimensions here
    var roundConstants[64][3]; 
    for (var r = 0; r < 64; r++) { 
        for (var i = 0; i < 3; i++) { 
            roundConstants[r][i] = (r * 3 + i + 1); 
        }
    }

    // 1. Add Round Constant
    signal state_after_rc[t_state_width];
    for (var i = 0; i < t_state_width; i++) {
        state_after_rc[i] <== in_state[i] + roundConstants[roundIdx][i];
    }
    for (var i = 0; i < t_state_width; i++) {
        log("  State After RC[", i, "]: ", state_after_rc[i]);
    }

    // 2. S-box Application
    signal state_after_sbox[t_state_width];
    
    component sboxComponents[t_state_width]; 

    if (roundType == 0) { 
        for (var i = 0; i < t_state_width; i++) {
            sboxComponents[i] = SBox(); 
            sboxComponents[i].x <== state_after_rc[i]; 
            state_after_sbox[i] <== sboxComponents[i].out; 
        }
        log("  S-box Type: Full");
    } else { 
        sboxComponents[0] = SBox(); 
        sboxComponents[0].x <== state_after_rc[0]; 
        state_after_sbox[0] <== sboxComponents[0].out; 

        for (var i = 1; i < t_state_width; i++) { 
            state_after_sbox[i] <== state_after_rc[i];
        }
        log("  S-box Type: Partial");
    }
    for (var i = 0; i < t_state_width; i++) {
        log("  State After S-box[", i, "]: ", state_after_sbox[i]);
    }

    // 3. MDS Matrix Multiplication
    for (var i = 0; i < t_state_width; i++) {
        // Direct summation for t_state_width = 3
        out_state[i] <== (MDS[i][0] * state_after_sbox[0]) +
                         (MDS[i][1] * state_after_sbox[1]) +
                         (MDS[i][2] * state_after_sbox[2]);
    }
    for (var i = 0; i < t_state_width; i++) {
        log("  Out State[", i, "]: ", out_state[i]);
    }
}

// 实现整个 Poseidon2 哈希算法
template Poseidon2Hash() {
  
    var RF_FULL_ROUNDS_LOCAL = 8;
    var PARTIAL_ROUNDS_LOCAL = 56;
    var TOTAL_ROUNDS_LOCAL = RF_FULL_ROUNDS_LOCAL + PARTIAL_ROUNDS_LOCAL; 
    var T_STATE_WIDTH_LOCAL = 3; // t=3

    signal input in_private[T_STATE_WIDTH_LOCAL - 1]; 
    signal input hash_output; 

    
    signal states[TOTAL_ROUNDS_LOCAL + 1][T_STATE_WIDTH_LOCAL]; 

    states[0][0] <== in_private[0];
    states[0][1] <== in_private[1];
    states[0][2] <== 0; 

    component rounds[TOTAL_ROUNDS_LOCAL]; 

    for (var r = 0; r < TOTAL_ROUNDS_LOCAL; r++) {
        var roundType = (r < (RF_FULL_ROUNDS_LOCAL / 2)) || (r >= TOTAL_ROUNDS_LOCAL - (RF_FULL_ROUNDS_LOCAL / 2)) ? 0 : 1;
        
        
        rounds[r] = Poseidon2Round(roundType, r, T_STATE_WIDTH_LOCAL, TOTAL_ROUNDS_LOCAL);
        
      
        for (var i = 0; i < T_STATE_WIDTH_LOCAL; i++) {
            rounds[r].in_state[i] <== states[r][i];
        }

        
        for (var i = 0; i < T_STATE_WIDTH_LOCAL; i++) {
            states[r+1][i] <== rounds[r].out_state[i];
        }
    }


    hash_output === states[TOTAL_ROUNDS_LOCAL][0];
}


component main = Poseidon2Hash();